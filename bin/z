#!/usr/bin/env perl6

use lib $*PROGRAM.sibling: '../lib';
my $conf := $*PROGRAM.sibling: '../config.json';
$conf.e or $conf.spurt: '{}';

use RDev;

my $rd := RDev.new: :$conf;
my %*SUB-MAIN-OPTS = :named-anywhere;

#|(remake rakudo, optionally running tests)
multi MAIN(Bool :$test) {
    $rd.re-make-rakudo: :$test;
}

#|(pull all and rebuild all)
multi MAIN('z') {
    $rd.pull-all;
    $rd.build-moar;
    $rd.re-make-nqp;
    $rd.re-make-rakudo: :clean;
}
#|(pull all)
multi MAIN('f') { $rd.pull-all; }
#|(remake nqp and rakudo)
multi MAIN('n', Bool :$test) {
    $rd.re-make-nqp:    :$test;
    $rd.re-make-rakudo: :$test, :clean;
}
#|(remake moar)
multi MAIN('m')   { $rd.re-make-moar; }
#|(remake moar, with debug mode enabled)
multi MAIN('md')  { $rd.re-make-moar-debug; }
#|(build moar from scratch (useful to disable debug mode))
multi MAIN('mnd') { $rd.build-moar; }

#|(run "best" test)
multi MAIN('bs') { $rd.best-test;  }
#|(run spectest)
multi MAIN('s')  { $rd.spectest;   }
#|(run stresstest)
multi MAIN('ss') { $rd.stresstest; }
#|(fudgeandrun tests)
multi MAIN('t', *@tests) { $rd.fudge-test: @tests; }

#|(bump moar and rakudo, run "best", test and push)
multi MAIN('bump', Bool :$no-push) {
    $rd.bump-nqp: $rd.bump-moar;
    $rd.re-make-nqp:    :test;
    $rd.re-make-rakudo: :test, :clean;
    unless $rd.best-test {
        exit if $no-push
            or 'y' ne lc prompt 'Had some test failures. Push anyway? [N/y]: '
    }
    $no-push or $rd.bump-push;
}
#|(bump moar)
multi MAIN('bump', 'm')         { $rd.bump-moar; }
#|(bump nqp)
multi MAIN('bump', 'n')         { $rd.bump-nqp;  }
#|(push prepared bumps)
multi MAIN('bump', 'push')      { $rd.bump-push; }
#|(push prepared moar bump)
multi MAIN('bump', 'push', 'm') { $rd.bump-push-moar; }
#|(push prepared nqp bump)
multi MAIN('bump', 'push', 'n') { $rd.bump-push-nqp;  }

#|(initialize new install, cloning all repos into dir)
multi MAIN('init', $dir = '.'.IO) {
    $rd.init: $dir;
    $rd.build-moar;
    $rd.build-nqp:   :test;
    $rd.build-rakudo :test;
    $rd.make-links;
    MAIN 'modi5';
}
#|(use full cycle to build moar)
multi MAIN('build', 'moar')   { $rd.build-moar; }
#|(use full cycle to build nqp)
multi MAIN('build', 'nqp')    { $rd.build-nqp:   :test; }
#|(use full cycle to build rakudo)
multi MAIN('build', 'rakudo') { $rd.build-rakudo :test; }

#|(install Inline::Perl5)
multi MAIN('modi5') {
    $rd.install-modules: ['Inline::Perl5'], :!tests;
}

#|(install modules, optionally running their tests)
multi MAIN('mod', *@modules-to-install where +*, Bool :$tests) {
    $rd.install-modules: @modules-to-install, :$tests;
}
#|(uninstall modules)
multi MAIN('umod', *@modules-to-uninstall where +*) {
    $rd.uninstall-modules: @modules-to-uninstall;
}
#|(make symlinks to perl6 binary)
multi MAIN(:$links!) { $rd.make-links; }


### Config options
#|(display config property (or all if no name is specified))
multi MAIN('conf', $conf-prop-name = *) { $rd.print-conf: $conf-prop-name }
#|(set config property to given value)
multi MAIN('conf', Str:D $conf-prop-name, Str:D $value) {
    $rd.set-conf: $conf-prop-name, $value;
}

### VM options
#|(set IP of remote VM (also can be set via `conf`))
multi MAIN('vm', Str:D $ip where /^\s*[\d**1..3\.]**3\d**1..3\s*$/) {
    say "Saved VM IP as " ~ $rd.set-conf: 'vm-ip', $ip.trim;
}
#|(sync all repos with remote VM)
multi MAIN('vm')   { $rd.sync-vm      }
#|(sync spec repo with remote VM)
multi MAIN('vm', 's') { $rd.sync-vm-spec }
#|(sync doc repo with remote VM)
multi MAIN('vm', 'd') { $rd.sync-vm-doc  }
#|(sync moar repo with remote VM)
multi MAIN('vm', 'm') { $rd.sync-vm-moar }
#|(sync nqp repo with remote VM)
multi MAIN('vm', 'n') { $rd.sync-vm-nqp  }
#|(sync rakudo repo with remote VM)
multi MAIN('vm', 'r') { $rd.sync-vm-rak  }
#|(git reset --hard and pull all LOCAL repos)
multi MAIN('vm', 'SCRUB') { $rd.vm-SCRUB }


### Editor options
#|(open atom to Grammar/Actions/World/Optimizer)
multi MAIN('q') {
    run «atom src/Perl6/Grammar.nqp  src/Perl6/Actions.nqp
              src/Perl6/World.nqp    src/Perl6/Optimizer.nqp»;
}


### Exec options
#|(run a command in all repos)
multi MAIN('r', *@args) {
    $rd.run-in-all: @args
}
